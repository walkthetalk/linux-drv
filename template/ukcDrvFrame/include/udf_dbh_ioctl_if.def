
#ifndef UDF_IOCTL_MACRO
#error "please define macro *UDF_IOCTL_MACRO*"
#else

/*
 * @1st: N-not R not W
 *       R-read
 *       W-write
 *       WR-write+read
 * @2nd: the interface's name used by upper layer app
 * @3rd: the type of parameter, it will be the *3rd* interface's parameter, but
 *       *type **
 */
/*
 * use the macro ***_ENCAP* to unfold the argument if it is a macro
 */
#define UDF_IOCTL_MACRO_ENCAP(x, y, z) UDF_IOCTL_MACRO(x, y, z)
UDF_IOCTL_MACRO_ENCAP(R, UDF_KFUNC(udf_read64), UDF_KTYPE(ioc_arg_rw64_t))
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_write64), UDF_KTYPE(ioc_arg_rw64_t))
UDF_IOCTL_MACRO_ENCAP(R, UDF_KFUNC(udf_read32), UDF_KTYPE(ioc_arg_rw32_t))
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_write32), UDF_KTYPE(ioc_arg_rw32_t))
UDF_IOCTL_MACRO_ENCAP(R, UDF_KFUNC(udf_read16), UDF_KTYPE(ioc_arg_rw16_t))
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_write16), UDF_KTYPE(ioc_arg_rw16_t))
UDF_IOCTL_MACRO_ENCAP(R, UDF_KFUNC(udf_read8), UDF_KTYPE(ioc_arg_rw8_t))
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_write8), UDF_KTYPE(ioc_arg_rw8_t))
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_enable_slot_int), const int)
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_disable_slot_int), const int)
UDF_IOCTL_MACRO_ENCAP(W, UDF_KFUNC(udf_query_slot_online), const int)
UDF_IOCTL_MACRO_ENCAP(R, UDF_KFUNC(udf_get_mem_size), unsigned int)
/*
 * user-defined interface
 */
#include UDF_KDRV_IF_DEF_FILE_NAME

/*
 * undefine the macro.
 */
#undef UDF_IOCTL_MACRO_ENCAP
#undef UDF_IOCTL_MACRO


#endif




